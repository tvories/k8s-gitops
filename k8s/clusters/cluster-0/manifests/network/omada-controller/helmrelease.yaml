---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app omada-controller
  namespace: network
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true
  values:
    controllers:
      omada-controller:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: mbentley/omada-controller
              tag: 5.15.20.18

            env:
              TZ: "${TIMEZONE}"
              MANAGE_HTTP_PORT: "8088"
              MANAGE_HTTPS_PORT: "8043"
              PORTAL_HTTP_PORT: "8088"
              PORTAL_HTTPS_PORT: "8843"
              SHOW_SERVER_LOGS: "true"
              SHOW_MONGODB_LOGS: "true"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            resources:
              requests:
                cpu: 500m
                memory: 1200Mi
              limits:
                memory: 2000Mi

    service:
      app:
        enabled: true
        controller: omada-controller
        ports:
          http:
            enabled: true
            port: 8043
            targetPort: 8043
            protocol: TCP
      controller:
        controller: omada-controller
        type: LoadBalancer
        annotations:
          io.cilium/lb-ipam-ips: "${LB_OMADA_CONTROLLER}"
        externalTrafficPolicy: Cluster
        ports:
          # # Docs: https://www.tp-link.com/us/support/faq/3281/
          # Management Ports
          mgmt-8088-tcp:
            port: 8088
            targetPort: 8088
            protocol: TCP
          mgmt-8043-tcp:
            port: 8043
            protocol: TCP
            targetPort: 8043
          portal-8843-tcp:
            port: 8843
            protocol: TCP
            targetPort: 8843
          # Device Discovery, Adoption, Management, and Upgrade
          eap-v5-discovery:
            port: 29810
            protocol: UDP
            targetPort: 29810
          eap-v4-discovery1:
            port: 29811
            protocol: TCP
            targetPort: 29811
          eap-v4-discovery2:
            port: 29812
            protocol: TCP
            targetPort: 29812
          eap-v4-upgrade:
            port: 29813
            protocol: TCP
            targetPort: 29813
          eap-v5-manage:
            port: 29814
            protocol: TCP
            targetPort: 29814
          eap-v5-device-info:
            port: 29815
            protocol: TCP
            targetPort: 29815
          eap-v5-remote-control:
            port: 29816
            protocol: TCP
            targetPort: 29816
          init-check:
            port: 27001
            protocol: UDP
            targetPort: 27001
          old-init-info:
            port: 27002
            protocol: TCP
            targetPort: 27002
          old-db-access:
            port: 27017
            protocol: TCP
            targetPort: 27017
          db-access:
            port: 27217
            protocol: TCP
            targetPort: 27217

    ingress:
      app:
        className: nginx-internal
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/upstream-vhost: "omada.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/proxy-redirect-from: "~https://(.+):8043/(.+)/login$"
          nginx.ingress.kubernetes.io/proxy-redirect-to: "https://$1/$2/login"
          # nginx.ingress.kubernetes.io/proxy-redirect-from: "https://(.+):8043/(.+)/$"
          # nginx.ingress.kubernetes.io/proxy-redirect-to: "https://$http_host/$2/"

          # Add a few more headers to make Omada happy
          # nginx.ingress.kubernetes.io/configuration-snippet: |
          #   proxy_set_header        X-Real-IP                 $remote_addr;
          #   proxy_set_header        X-Forwarded-For           $proxy_add_x_forwarded_for;
          #   proxy_set_header        Cookie                    $http_cookie;
          #   proxy_set_header        X-Forwarded-Proto         $scheme;
          #   proxy_set_header        Upgrade                   $http_upgrade;
          #   proxy_set_header        Connection                "upgrade";

        hosts:
          - host: &host omada.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: &certname tls.omada
    persistence:
      data:
        globalMounts:
          - path: /opt/tplink/EAPController/data
        existingClaim: omada-data
      work:
        existingClaim: omada-work
        globalMounts:
          - path: /opt/tplink/EAPController/work
      logs:
        existingClaim: omada-logs
        globalMounts:
          - path: /opt/tplink/EAPController/logs
      backup:
        type: nfs
        server: ${SECRET_NAS3}
        path: /ook/Backup/k8s/applications/omada
        globalMounts:
          - path: /opt/tplink/EAPController/data/autobackup
