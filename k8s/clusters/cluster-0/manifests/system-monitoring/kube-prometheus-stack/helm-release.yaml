---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
  namespace: system-monitoring
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 76.4.0
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: system-monitoring
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
  install:
    remediation:
      retries: 1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: nginx-internal
        hosts:
          - &host-alert-manager alert-manager.${CLUSTER_NAME}.${SECRET_DOMAIN}
        paths:
          - /
        pathType: Prefix
        tls:
          - hosts:
              - *host-alert-manager
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 20Gi
    kubeEtcd:
      service:
        selector:
          component: kube-apiserver # etcd runs on control plane nodes
    kubeProxy:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx-internal
        pathType: Prefix
        hosts:
          - prometheus.${CLUSTER_NAME}.${SECRET_DOMAIN}
        tls:
          - secretName: prometheus-${CLUSTER_NAME}-tls
            hosts:
              - prometheus.${CLUSTER_NAME}.${SECRET_DOMAIN}

      prometheusSpec:
        image:
          registry: docker.io
          repository: prompp/prompp
          tag: 2.53.2-0.2.5
        securityContext:
          runAsNonRoot: true
          runAsUser: 64535
          runAsGroup: 64535
          fsGroup: 64535
        thanos:
          image: quay.io/thanos/thanos:v0.39.2
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: v0.39.2
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml

        additionalScrapeConfigs:
          - job_name: node-exporter
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "physical2.${SECRET_INTERNAL_DOMAIN}:9100"
                  - "m720q-1.${SECRET_INTERNAL_DOMAIN}:9100"
                  - "m720q-2.${SECRET_INTERNAL_DOMAIN}:9100"
                  - "m720q-3.${SECRET_INTERNAL_DOMAIN}:9100"
                  - "nas3-80.${SECRET_DOMAIN}:9100"
                  - "tback.${SECRET_INTERNAL_DOMAIN}:9100" # tback
                  # - "opnsense.${SECRET_INTERNAL_DOMAIN}:9100"

          - job_name: smartctl-exporter
            scrape_interval: 5m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "nas3-80.${SECRET_DOMAIN}:9633"
                  - "tback.${SECRET_INTERNAL_DOMAIN}:9633"

          - job_name: zrepl-exporter
            scrape_interval: 5m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "nas3-80.${SECRET_DOMAIN}:9811"

          - job_name: zfs-exporter
            scrape_interval: 5m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "nas3-80.${SECRET_DOMAIN}:9901"

          - job_name: "home-assistant"
            scrape_interval: 60s
            metrics_path: "/api/prometheus"
            bearer_token: "${SECRET_HASS_PROMETHEUS_TOKEN}"
            scheme: http
            static_configs:
              - targets:
                  - home-assistant-app.home.svc.cluster.local:8123
          # - job_name: "opnsense"
          #   scrape_interval: 30s
          #   # metrics_path: "/metrics"
          #   # honor_timestamps: true
          #   scrape_timeout: 20s
          #   scheme: http
          #   static_configs:
          #     - targets:
          #         - "opnsense.${SECRET_INTERNAL_DOMAIN}:9100"

          # - job_name: "snmp"
          #   metrics_path: /snmp
          #   params:
          #     module: [if_mib]
          #   static_configs:
          #     - targets:
          #         - "192.168.1.252"
          #   relabel_configs:
          #     - source_labels: [__address__]
          #       target_label: __param_target
          #     - source_labels: [__param_target]
          #       target_label: instance
          #     - target_label: __address__
          #       replacement: snmp-exporter-cisco-switch:9116 # SNMP exporter.

          - job_name: "windows_exporter"
            metrics_path: /metrics
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "deskmonster.${SECRET_INTERNAL_DOMAIN}:9182"

          - job_name: "nvidia_gpu_exporter"
            metrics_path: /metrics
            scrape_interval: 30s
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "deskmonster.${SECRET_INTERNAL_DOMAIN}:9835"

        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        retention: 14d
        retentionSize: 50GB
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 2000Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 75Gi
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
      zfs-rules:
        groups:
          - name: zfs
            rules:
              - alert: ZfsUnexpectedPoolState
                annotations:
                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
                expr: node_zfs_zpool_state{state!="online"} > 0
                labels:
                  severity: critical
